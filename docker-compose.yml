version: '3.8'
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - '8089:8089'
    volumes:
      - ./nginx/default.local.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      telegraf:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring
  telegraf:
    image: telegraf:1.34.2
    container_name: telegraf
    restart: always
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ./telegraf/inputs.influxdb_listener.8087.gatling_results.conf:/etc/telegraf/telegraf.d/inputs.influxdb_listener.8087.gatling_results.conf:ro
      - ./telegraf/outputs.kafka.conf:/etc/telegraf/telegraf.d/outputs.kafka.conf:ro
      - type: bind
        source: ./results/metrics.log
        target: /tmp/metrics.log
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - '8088:8088'
    networks:
      - monitoring
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    restart: always
    env_file:
      - ./kafka/config/.env
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    env_file:
      - ./kafka/config/.env
    environment:
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring
  gatling-monitoring:
    image: maven:3.9.9-amazoncorretto-21-debian
    container_name: gatling-monitoring
    cpu_count: 1
    cpuset: "5-7"
    mem_reservation: 256m
    mem_limit: 512m
    depends_on:
      telegraf:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - "./gatling-gradle-plugin-demo-java-perftest-run.jar:/tmp/gatling/gatling-gradle-plugin-demo-java-perftest-run.jar:ro"
      - "./results:/tmp/gatling/results"
      - "./volumes/gatling/repository:/root/.m2/repository"
      - "./performance-gatling-publisher:/tools/performance-gatling-publisher:ro"
      - "./volumes/gatling/io.netty.native.workdir:/io.netty.native.workdir"
      - "./volumes/gatling/jansi.tmpdir:/jansi.tmpdir"
      - "./volumes/gatling/monitoring:/tmp/target/load-test-results"
    tmpfs:
      - /tmp:exec,mode=1777
    working_dir: /tmp/gatling
    restart: "no"
    networks:
      - monitoring
    command: bash -x -c "
      echo 'Starting gatling-publisher in detached mode, saving PID in variable' &&
      export gatlingPublisherPID=$$(/tools/performance-gatling-publisher/gatling-publisher
      ./results --address http://nginx:8089
      --system-under-test monitoring
      --test-environment local
      --run-id 123456
      --run-name SomeRunName
      --stop-timeout 90
      --database gatling_results
      -d | awk '{print $$2}')
      &&
      echo 'Installing dependencies' &&
      apt-get update && apt-get install -y libapr1 libssl-dev &&
      echo 'Build and execute test' &&
      java -jar gatling-gradle-plugin-demo-java-perftest-run.jar -s computerdatabase.ComputerDatabaseSimulation
      &&
      echo 'Waiting for parser to safely finish all its work' &&
      sleep 30
      &&
      echo 'Sending interrupt signal to gatling-publisher process' &&
      kill -INT $$gatlingPublisherPID
      &&
      echo 'Waiting for process to stop safely' &&
      sleep 30
      &&
      echo 'Exiting'
      "
  logstash:
    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:8.9.0
    container_name: logstash
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/output:/usr/share/logstash/output
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    env_file:
      - ./logstash/config/.env
    mem_limit: 1g
    mem_reservation: 512m
    networks:
      - monitoring
      - opensearch_opensearch-net

networks:
  monitoring:
  opensearch_opensearch-net:
    external: true